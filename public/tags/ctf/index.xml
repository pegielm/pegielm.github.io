<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctf on pegielm</title>
    <link>http://localhost:1313/tags/ctf/</link>
    <description>Recent content in Ctf on pegielm</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright> Â© pegielm</copyright>
    <lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>invaders writeup</title>
      <link>http://localhost:1313/posts/invaders_writeup/</link>
      <pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/invaders_writeup/</guid>
      <description>Challenge description We&amp;rsquo;ve found an old-school space-invaders game on a PwnTopia server, but it seems to be unusually large in size. Maybe something is hidden inside of it&amp;hellip;&#xA;Solution we are given binary file (game):&#xA;first we can see that this is Godot Engine game, so we can extract the game - for example using Godot RE Tools&#xA;after opening the game in Godot there is suspicious fragment of code:</description>
    </item>
    <item>
      <title>apples and oranges writeup</title>
      <link>http://localhost:1313/posts/apples_and_oranges/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/apples_and_oranges/</guid>
      <description>Challenge description After capturing an enemy spy, the only thing we got from him was that the password is bananafruit. It does not seem to be right though. Can you help us?&#xA;nc apples-and-oranges-25b1895e82ba.tcp.1753ctf.com 12827&#xA;Solution after conecting to the server we are presented with following:&#xA;# nc apples-and-oranges-25b1895e82ba.tcp.1753ctf.com 12827 Wir usen Node v23.10.0 Gib mich eine kleine password:abcdef abcdef Well, well, well... das input ist unallowed! so i tried to fuzz the input with following code and see what happens, then i started filtering by error types.</description>
    </item>
    <item>
      <title>safebox writeup</title>
      <link>http://localhost:1313/posts/safebox_writeup/</link>
      <pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/safebox_writeup/</guid>
      <description>Challenge description Your files. Encrypted at rest. Premium accounts available soon. // careful, this app is resetting every 15 mintutes&#xA;source code:&#xA;safebox&#xA;Solution we are presented with a site that allows us to register and upload files that will be encrypted (also we can&amp;rsquo;t download them directly by pressing button as it is for &amp;lsquo;premium&amp;rsquo; users only).&#xA;files are stored with per-user folders and ecrypted with AES-256-OFB mode. flag is stored in admin&amp;rsquo;s directory</description>
    </item>
    <item>
      <title>fifology writeup</title>
      <link>http://localhost:1313/posts/fifology_writeup/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/fifology_writeup/</guid>
      <description>Challenge description In the age of old, before the Stack-mages seized dominion over enchanted devices, only a select few possessed the wisdom to unravel the mysteries of the arcane queue language.&#xA;files :&#xA;program.fo&#xA;documentation.md&#xA;Solution we can seperate the code into parts:&#xA;PUSH 0; PUSH 6; PUSH 102; PUSH 108; PUSH 97; PUSH 103; PUSH 58; PUSH 32; SYSCALL; prints flag: PUSH 244; PUSH 100; PUSH 224; PUSH 108; PUSH 192; PUSH 92; PUSH 230; PUSH 116; PUSH 202; PUSH 43; PUSH 210; PUSH 105; PUSH 178; PUSH 101; PUSH 162; PUSH 13; PUSH 37; PUSH 78; PUSH 182; PUSH 78; PUSH 166; PUSH 84; PUSH 154; PUSH 72; PUSH 168; PUSH 72; PUSH 168; PUSH 76; PUSH 178; PUSH 68; PUSH 146; PUSH 70; PUSH 166; PUSH 92; PUSH 0; PUSH 34; this part of the code is a flag chars before decryption.</description>
    </item>
    <item>
      <title>in the dark writeup</title>
      <link>http://localhost:1313/posts/in_the_dark_writeup/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/in_the_dark_writeup/</guid>
      <description>Challenge description A lone mage, lost in the abyss of darkness awaits aid. Only a experienced wizard can guide him, perceiving what mortal eyes cannot see&amp;hellip;&#xA;files :&#xA;chall&#xA;or you can build it from source:&#xA;source.c&#xA;you need to compile it with:&#xA;gcc source.c -lssl -lcrypto -o chall Solution open chall in ida&#xA;in move_right() function (or any other) there is variable &amp;lsquo;MAP&amp;rsquo;&#xA;after inspecting the &amp;lsquo;MAP&amp;rsquo; (right click -&amp;gt; array -&amp;gt; turn off &amp;lsquo;Use dup construnct&amp;rsquo;) we can see (or in gdb &amp;lsquo;x/100x (int*)&amp;amp;MAP&amp;rsquo;):</description>
    </item>
    <item>
      <title>mov it mov it writeup</title>
      <link>http://localhost:1313/posts/mov_it_mov_it_writeup/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/mov_it_mov_it_writeup/</guid>
      <description>Challenge description Oh no! The poor mage has stumbled upon a massive stone blocking his path. If only there was someone who knew a spell to mov it&amp;hellip;&#xA;files :&#xA;chall&#xA;or you can build it from source:&#xA;source.c&#xA;but you need to compile it with movuscator :)&#xA;movcc -Wf--no-mov-flow source.c -o chall Solution run chall in gdb&#xA;set breakpoint on puts (b *puts) (other breakpoints probably also work, puts is visible in the debugger)</description>
    </item>
    <item>
      <title>red flags writeup</title>
      <link>http://localhost:1313/posts/red_flags_writeup/</link>
      <pubDate>Sun, 17 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/red_flags_writeup/</guid>
      <description>Challenge description link to challange : red flags (34 solves)&#xA;The challenge is simple game made in godot engine with a goal to touch flags in correct order - when you touch each flag letters move in some directions.&#xA;We can see bait flag here ;)&#xA;Solution I started by extracting the game files (project) with Godot RE Tools and then opened it in godot engine.&#xA;Then we can see game source code, also we can debug and change it.</description>
    </item>
    <item>
      <title>ISA 101 writeup</title>
      <link>http://localhost:1313/posts/isa_101_writeup/</link>
      <pubDate>Mon, 11 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/isa_101_writeup/</guid>
      <description>Challenge description Goal of the challange is to reverse engineer code written in ISA (documentation) - assembly language designed by Black Bauhinia.&#xA;With challange we get 2 urls:&#xA;Challenge: https://c58a-ish-1.hkcert24.pwnable.hk?id=3&#xA;Playground: https://c58b-ish-2.hkcert24.pwnable.hk?id=1&#xA;We can access the executable and download assembly in the challenge url, and the playground url is a web interface to run and debug the ISA code.&#xA;Solution Assembly code (with added comments):&#xA;JMP 0x400088; PUSH FP; MOV FP, SP; SUB SP, 4; MOV R1, [FP+8]; MOV R8, 5; SYSCALL; MOV R2, R1; MOV R1, 0; MOV SP, FP; POP FP; RET; SUB SP, 364; MOV R1, SP; MOV SP, FP; SUB SP, 0; PUSH 0xb146f66e; //xor keys pushed on stack PUSH 0x2fd8b7c1; PUSH 0x95e11585; PUSH 0xcf39fb28; PUSH 0xb3accf4c; PUSH 0xdb22a8cb; PUSH 0xe21f60cd; PUSH 0xb660d0fe; PUSH 0x8be89ec9; PUSH 0x241bd185; PUSH 0x161d7e99; PUSH 0xbf3a7f64; PUSH 0xea7454ee; PUSH 0x2e04ce47; PUSH 0x18b25e16; PUSH 0x2295643e; PUSH 0x49f8d91f; PUSH 0x3f541ea6; PUSH 0x113d8a6f; PUSH 0x38726ccc; PUSH 0x2e27be68; PUSH 0xd4e398ea; PUSH 0x7fcba040; PUSH 0xeec775f5; PUSH 0x478ff266; PUSH 0x718a3507; PUSH 0x536edeba; PUSH 0xf0efb119; PUSH 0x9efdd1c2; PUSH 0x977b4203; PUSH 0x2ceeda0d; PUSH 0xfdc086ff; PUSH 0x2303c15a; PUSH 0x3c9d30a1; PUSH 0x193f231b; PUSH 0x1a06a63f; PUSH 0x5c829f5; PUSH 0x49c872b8; PUSH 0x92bcbdad; PUSH 0xa9a5a84e; PUSH 0xb16969c; PUSH 0xb58b3659; PUSH 0x642069c9; PUSH 0x9c37ba69; PUSH 0x623277a4; PUSH 0x17b6f65c; PUSH 0xa6a21506; PUSH 0x15881c76; PUSH 0x96ed9c50; PUSH 0x21226b56; PUSH 0xd8890218; PUSH 0xca6eddde; PUSH 0x9a18e395; PUSH 0x936f6277; PUSH 0xaf23d230; PUSH 0x88d9666a; PUSH 0xff591d2f; PUSH 0xce454872; PUSH 0xf3391e9f; PUSH 0x4ddd147f; PUSH 0x404bcc99; PUSH 0x5becacfd; PUSH 0x1d9f2f1; PUSH 0xc833a241; MOV SP, R1; MOV R1, FP; SUB R1, 356; MOV R2, 100; MOV R8, 0; SYSCALL; //read input MOV R2, R8; MOV R3, 0; MOV R4, FP; SUB R4, 256; MOV R5, R4; ADD R5, R3; MOV R6, R1; ADD R6, R3; MOV R7, [R5]; XOR [R6], R7; //xor input with key MOV [FP-360], R2; MOV [FP-364], R3; MOV R1, FP; SUB R1, 356; MOV R2, [FP-360]; MOV R3, [FP-364]; ADD R3, 4; LT R3, 100; JNZ -231; //loop MOV R4, R1; ADD R4, R2; MOV [R4], 0; MOV R4, R1; ADD R4, 0; EQ [R4], 29548; //check if decrypted value begins wth 29548 JNZ +9; JMP +20; MOV R8, 4; SYSCALL; MOV R4, R1; ADD R4, 0; EQ [R4], 1667594341; //check if decrypted value begins wth 1667594341 JNZ +9; JMP +94; MOV R4, R1; ADD R4, 5; PUSH R4; MOV [FP-360], R2; MOV [FP-364], R3; CALL 0x400014; ADD SP, 4; MOV R1, 0; MOV R8, 2; SYSCALL; ADD SP, 364; After inspecting the code (adding breakpoints on XOR, and on value checks), we can see that it takes some input from the user (on image 4141&amp;hellip; = &amp;lsquo;AAAAA.</description>
    </item>
    <item>
      <title>comma club writeup</title>
      <link>http://localhost:1313/posts/comma_club_writeup/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/comma_club_writeup/</guid>
      <description>Challenge description link to challange&#xA;&amp;ldquo;We need somone to run our vote tallying machine, and it needs to be someone trustworthy. Apparently there&amp;rsquo;s some problem if a candidate gets too many votes. Shouldn&amp;rsquo;t be a problem for us in Wyoming though.&amp;rdquo;&#xA;nc comma-club.chal.hackthe.vote 1337&#xA;file&#xA;Solution After inspecting the checksec output, we can see that the binary is not stripped and has all the protections disabled. We can also see that the binary is a 64-bit ELF file.</description>
    </item>
    <item>
      <title>cpu goes brrr writeup</title>
      <link>http://localhost:1313/posts/cpu_goes_brrr_writeup/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/cpu_goes_brrr_writeup/</guid>
      <description>Challenge description link to challange&#xA;&amp;ldquo;It might print the flag. If you wait long enough&amp;hellip; https://www.youtube.com/watch?v=h3hwff_CeeM.&amp;quot;&#xA;Solution The challenge is binary file, we can decompile it using Ida (or other disassembler).&#xA;These are most important parts of the code:&#xA;main function:&#xA;__int64 __fastcall main(int a1, char **a2, char **a3) { void *v3; // rsp char v4; // r12 int i; // [rsp+8h] [rbp-30h] BYREF int v7; // [rsp+Ch] [rbp-2Ch] __int64 v8; // [rsp+10h] [rbp-28h] void *s; // [rsp+18h] [rbp-20h] unsigned __int64 v10; // [rsp+20h] [rbp-18h] v10 = __readfsqword(0x28u); v7 = 37; v8 = 37LL; v3 = alloca(48LL); s = &amp;amp;i; memset(&amp;amp;i, 0, 38uLL); for ( i = 0; i &amp;lt; v7; ++i ) { v4 = byte_4020[i]; *((_BYTE *)s + i) = sub_126B(i * i * i) ^ v4; puts((const char *)s); } return 0LL; } key generation function:</description>
    </item>
    <item>
      <title>magiczna cat writeup</title>
      <link>http://localhost:1313/posts/magiczna_cat_writeup/</link>
      <pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/magiczna_cat_writeup/</guid>
      <description>Challenge description link to challange&#xA;&amp;ldquo;My cybersecurity job is very poorly paid and I&amp;rsquo;m looking for a more lucrative job in the gamedev industry. I hid a flag in one of my first games, try to find it!&amp;rdquo;&#xA;Solution Task is browser game written in JavaScript that looks like this: Our goal is to get to flag, but our route is blocked by a cat. After inspecting game.js in website sources we can find this part of code:</description>
    </item>
  </channel>
</rss>
